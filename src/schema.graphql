type Query {
    users(
        page: Int
        take: Int
        criteria: UserCriteriaInput
        searchTerm: String
        orderBy: UserOrderByInput
    ): Users!
    posts(
        page: Int
        take: Int
        criteria: PostCriteriaInput
        searchTerm: String
        orderBy: PostOrderByInput
    ): Posts!
    myPosts(
        page: Int
        take: Int
        criteria: MyPostCriteriaInput
        searchTerm: String
        orderBy: PostOrderByInput
    ): Posts!
    comments(
        page: Int
        take: Int
        criteria: CommentCriteriaInput
        searchTerm: String
        orderBy: CommentOrderByInput
    ): Comments!
    post(id: ID!): Post!
    me: User!
}

type Mutation {
    createUser(data: CreateUserInput!): AuthPayload!
    login(data: LoginUserInput!): AuthPayload!
    deleteUser: User!
    updateUser(data: UpdateUserInput): User!
    createPost(data: CreatePostInput!): Post!
    deletePost(id: ID!): Post!
    updatePost(id: ID!, data: UpdatePostInput): Post!
    createComment(data: CreateCommentInput): Comment!
    deleteComment(id: ID!): Comment!
    updateComment(id: ID!, data: UpdateCommentInput): Comment!
}

type Subscription {
    comment(postId: ID!): CommentSubscriptionPayload!
    post: PostSubscriptionPayload!
    myPost: PostSubscriptionPayload!
}

type User {
    id: ID!
    name: String!
    email: String!
    createdAt: String!
    updatedAt: String!
    posts: [Post!]!
    comments: [Comment!]!
}

type Post {
    id: ID!
    title: String!
    body: String!
    published: Boolean!
    createdAt: String!
    updatedAt: String!
    author: User!
    comments: [Comment!]!
}

type Comment {
    id: ID!
    text: String!
    createdAt: String!
    updatedAt: String!
    author: User!
    post: Post!
}

type Pagination {
    next: PaginationParam
    prev: PaginationParam
}

type PaginationParam {
    page: Int!
    take: Int!
}

type Users {
    count: Int!
    pagination: Pagination
    results: [User!]!
}

type Posts {
    count: Int!
    pagination: Pagination
    results: [Post!]!
}

type Comments {
    count: Int!
    pagination: Pagination
    results: [Comment!]!
}

input UserCriteriaInput {
    name: String
    email: String
}

input PostCriteriaInput {
    title: String
    body: String
}

input MyPostCriteriaInput {
    title: String
    body: String
    published: Boolean
}

input CommentCriteriaInput {
    text: String
}

input UserOrderByInput {
    name: Sort
    email: Sort
    createdAt: Sort
    updatedAt: Sort
}

input PostOrderByInput {
    title: Sort
    body: Sort
    published: Sort
    createdAt: Sort
    updatedAt: Sort
}

input CommentOrderByInput {
    text: Sort
    createdAt: Sort
    updatedAt: Sort
}

enum Sort {
    asc
    desc
}

type AuthPayload {
    token: String!
    user: User!
}

input CreateUserInput {
    name: String!
    email: String!
    password: String!
}

input LoginUserInput {
    email: String!
    password: String!
}

input UpdateUserInput {
    name: String
    email: String
    password: String
}

input CreatePostInput {
    title: String!
    body: String!
    published: Boolean
}

input UpdatePostInput {
    title: String
    body: String
    published: Boolean
}

input CreateCommentInput {
    text: String!
    postId: ID!
}

input UpdateCommentInput {
    text: String
}

enum MutationType {
    CREATED
    UPDATED
    DELETED
}

type PostSubscriptionPayload {
    mutation: MutationType!
    data: Post!
}

type CommentSubscriptionPayload {
    mutation: MutationType!
    data: Comment!
}
